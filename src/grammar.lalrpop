use super::ast::*;

grammar;

extern {
    type Error = SpannedError;
}

match {
	r"[a-zA-Z_][a-zA-Z_0-9]*" => IDENT,
	r"-?\d+" => INTEGER,
	r"-?\d+\.\d+" => FLOAT,
	r#""(\\[\\"nrt]|[^"\\])*""# => STRING,
	r#"`(\\[\\`nrt]|[^`\\])*`"# => QUOTED_IDENT,
	r"\d+@" => LINE,

	"global", "function",
	"prelude", "dup", "num", "str", // I'd rather not have these be keywords, but dunno how to avoid
	"if", "else", "while", "switch", "case", "default",
	"return", "break", "continue", "tailcall",
	"var",
	"(", ")", "[", "]", "{", "}",
	":", ";", "=", ",", ".",
	"+", "-", "*", "/", "%",
	"==", "!=", ">", ">=", "<", "<=",
	"&", "&&", "|", "||", "~", "!",
}

pub Scena: Vec<Item> = Item*;

Item: Item = {
	Global => Item::Global(<>),
	Function => Item::Function(<>),
}

Global: Global = {
	<line: Line>
	"global"
	<name: Spanned<Name>>
	":" <ty: Type>
	";"
	=> Global { <> }
}

Function: Function = {
	<prelude: Opt<"prelude">>
	"function"
	<name: Spanned<Name>>
	<args: Comma<Arg>>
	<dup: Opt<"dup">>
	<body: Block>
	=> Function { <> }
}

Arg: Arg = {
	<name: Spanned<Name>>
	":" <out: Opt<"&">> <ty: Type>
	<default: ("=" <Value>)?>
	=> Arg { <> }
}

Type: Type = {
	"num" => Type::Number,
	"str" => Type::String,
}

Value: Value = {
	Try<i32> => Value::Int(<>),
	Try<f32> => Value::Float(<>),
	STRING => Value::String(unescape(<>, '"')),
}

i32: Result<i32> = { INTEGER => <>.parse().map_err(Error::IntParse) }
u8: Result<u8> = { INTEGER => <>.parse().map_err(Error::IntParse) }
f32: Result<f32> = { FLOAT => <>.parse().map_err(Error::FloatParse) }

Comma<T>: Vec<T> = {
	"(" <mut v:(<T> ",")*> <e:T?> ")" => { v.extend(e); v }
}

Opt<T>: bool = { T? => <>.is_some() }

Name: String = {
	IDENT => String::from(<>),
	QUOTED_IDENT => unescape(<>, '`'),
}

ExternName: String = {
	Name,
	<a:Name> "." <b:Name> => format!("{a}.{b}"),
}

Block: Vec<Stmt> = { "{" <Stmts> "}" }

Stmts: Vec<Stmt> = { ";"* <(<Stmt> ";"*)*> }

Stmt: Stmt = {
	<Line> "return" <Expr?> ";" => Stmt::Return(<>),
	If,
	<Line> "while" <Expr> <Block> => Stmt::While(<>),
	<Line> "switch" <Expr> "{" <SwitchCases> "}" => Stmt::Switch(<>),
	<Line> "var" <Spanned<Name>> <("=" <Expr>)?> ";" => Stmt::PushVar(<>),
	<Line> <Lvalue> "=" <Expr> ";" => Stmt::Set(<>),
	<Call> ";" => Stmt::Expr(<>),
	"break" ";" => Stmt::Break,
	"continue" ";" => Stmt::Continue,
	<l:Line> "tailcall" <n:Spanned<ExternName>> <a:Comma<CallArg>> ";" => Stmt::Expr(Expr::Call(l, CallKind::Tail(n), a)),
}

If: Stmt = {
	<Line> "if" <Expr> <Block> <("else" <Else>)?> => Stmt::If(<>),
}

Else: Vec<Stmt> = { Block, If => vec![<>] }

SwitchCases: Vec<(Option<i32>, Vec<Stmt>)> = {
	=> Vec::new(),
	<mut cs: SwitchCases> <k: SwitchKey> ":" <v: Stmts> => {
		cs.push((k, v));
		cs
	}
}

SwitchKey: Option<i32> = {
	"default" => None,
	"case" <Try<i32>> => Some(<>),
}

Expr: Expr = { Atom (Line Binop Atom)* => expr(<>) }

Atom: Expr = {
	Line Value => Expr::Value(<>),
	Line Lvalue => Expr::Var(<>),
	Call,
	Line Unop Box<Atom> => Expr::Unop(<>),
	"(" <Expr> ")",
}

Binop: Binop = {
	"+" => Binop::Add,
	"-" => Binop::Sub,
	"*" => Binop::Mul,
	"/" => Binop::Div,
	"%" => Binop::Mod,
	"==" => Binop::Eq,
	"!=" => Binop::Ne,
	">" => Binop::Gt,
	">=" => Binop::Ge,
	"<" => Binop::Lt,
	"<=" => Binop::Le,
	"&" => Binop::BitAnd,
	"|" => Binop::BitOr,
	"&&" => Binop::BoolAnd,
	"||" => Binop::BoolOr,
}

Unop: Unop = {
	"-" => Unop::Neg,
	"!" => Unop::BoolNot,
	"~" => Unop::BitNot,
}

Call: Expr = {
	<Line> <CallKind> <Comma<CallArg>> => Expr::Call(<>)
}

// TODO should we ensure ref is only used in arg in other parts?
CallArg: Expr = {
	Expr,
	<Line> "&" <Spanned<Name>> => Expr::Ref(<>),
}

Lvalue: Lvalue = {
	<Spanned<Name>> => Lvalue::Stack(<>),
	"*" <Spanned<Name>> => Lvalue::Deref(<>),
	":" <Spanned<Name>> => Lvalue::Global(<>),
}

CallKind: CallKind = {
	Spanned<ExternName> => CallKind::Func(<>),
	Try<_System> "[" <Try<u8>> "," <Try<u8>> "]" => CallKind::System(<>)
}

_System: Result<()> = {
	IDENT => if <> == "system" {
		Ok(())
	} else {
		Err(Error::ExpectedLiteral(&["system"]))
	}
}

Box<T>: Box<T> = { T => Box::new(<>) }
Spanned<T>: Spanned<T> = { <start: @L> <value: T> <end: @R> => Spanned { value, start, end } }
Try<T>: Unwrap<T> = { <l: @L> <val: T> <r: @R> =>? val.map_err(SpannedError(l, r)) }

Line: Option<u16> = {
	<l: @L> <val: LINE> <r: @R> =>? {
		val.strip_suffix('@').unwrap().parse()
			.map_err(Error::IntParse)
			.map_err(SpannedError(l, r - 1))
			.map(Some)
	},
	=> None
}
